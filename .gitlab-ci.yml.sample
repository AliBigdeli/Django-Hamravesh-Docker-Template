stages: 
  # - test
  - build
  - deploy 



# testing project
test:
  # defining the stage name
  stage: test

  # defining which branch to listen
  only:
    refs:
    - prod

  # defining specific runners
  tags:
    - my-runner

  # defining the base image 
  image: hub.hamdocker.ir/library/python:3.9-slim-buster

  # defining the services which it depends on
  services:
    - name: hub.hamdocker.ir/library/postgres:13-alpine
      alias: db

  # scripts which needs to be run before main script
  before_script:
    - pip3 install -r requirements.txt
    - cd ./core
    - export DJANGO_SETTINGS_MODULE=core.settings

  # main script for testing django app
  script:
    - python manage.py makemigrations
    - python manage.py migrate
    - python manage.py test
    # or 
    # - pytest .

  # variables for service and main image
  variables:
    DATABASE: postgres
    POSTGRES_DB: postgres
    POSTGRES_USER: postgres
    POSTGRES_PASSWORD: postgres
    DB_VENDOR: postgres
    PGDATA: /var/lib/postgresql/data


# building the docker image
darkube_build:
  image: hamravesh.hamdocker.ir/public/darkube-cli:v1.1

  # defining which branch to listen
  only:
    refs:
    - prod

  # defining specific runners
  # tags:
  #   - my-runner

  # name of the predefined env variables: https://github.com/gitlabhq/gitlabhq/blob/master/doc/ci/variables/predefined_variables.md
  script:
  - 'darkube build --push -t $IMAGE:$CI_COMMIT_SHORT_SHA -t $IMAGE:$CI_COMMIT_REF_SLUG  --workdir
    . --file ./dockerfiles/prod/django/Dockerfile --build-context . '
  stage: build



# deploying the docker image
darkube_deploy:
  image: hamravesh.hamdocker.ir/public/darkube-cli:v1.1

  # defining which branch to listen
  only:
    refs:
    - prod
  
  # defining specific runners
  # tags:
  #   - my-runner

  script:
  - darkube deploy --ref prod --token ${DARKUB_DEPLOY_TOKEN} --app-id
    ${DARKUBE_APP_ID}  --image-tag "${CI_COMMIT_SHORT_SHA}" --job-id
    "${CI_JOB_ID}" --stateless-app true
  stage: deploy
