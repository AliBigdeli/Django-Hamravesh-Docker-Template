
# migration docs: https://docs.github.com/en/actions/migrating-to-github-actions/migrating-from-gitlab-cicd-to-github-actions
name: Django Project Test and Deploy

# define which repo to listen to for trigger
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

# list of all jobs
jobs:

  # testing stage of the project
  Test:
    # declaring the name of this job
    name: Test

    # which operating system its going to use
    runs-on: ubuntu-latest

    # services dependency
    services:

      # database which django is going to interact with
      postgres:

        # database image and version/tag
        image: postgres:latest

        # environment for configuring the database
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: postgres

        # mapping ports
        ports:
          - 5432:5432
        # needed because the postgres container does not provide a healthcheck
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5

    # global environment for this job
    env: 
      PGDB_HOST: 127.0.0.1
    
    # steps which it will go through for test
    steps:
    
    # bringing the code and checking 
    - uses: actions/checkout@v3

    # setup python environment and version
    - name: Set up Python 3.9
      uses: actions/setup-python@v4
      with:
        python-version: 3.9
    
    # installing django dependencies
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    # running all migrations
    - name: Run migrations
      working-directory: ./core
      run: python manage.py migrate

    # testing the project from the root directory of core
    - name: Run tests
      env:
        DJANGO_SETTINGS_MODULE: core.settings
      run: pytest .

  
  
  Build:
    # check if it passed the test phase
    if: ${{ always() && contains(join(needs.*.result, ','), 'success') }}

    # declaring the name of this job
    name: Build

    # depending the job to the test phase
    needs: Test

    # choosing which os to run on
    runs-on: ubuntu-latest

    # choosing darkube cli for building
    container: hamravesh.hamdocker.ir/public/darkube-cli:v1.1

    # steps which it will go through for test
    steps:
    
    # bringing the code and checking 
    - uses: actions/checkout@v2

    # executing build script to build the current project image in private registry
    - name: Connect and build
      script:
        - 'darkube build --push -t $IMAGE:$CI_COMMIT_SHORT_SHA -t $IMAGE:$CI_COMMIT_REF_SLUG  --workdir
          . --file ./dockerfiles/prod/django/Dockerfile --build-context . '

    - name: Run build 
        run: |
          docker login $REGISTRY -u $REGISTRY_USER -p $REGISTRY_PASSWORD
          docker build -t "$IMAGE:${GITHUB_SHA:0:7}" -f ./dockerfiles/prod/django/Dockerfile .
          docker push "$IMAGE:${GITHUB_SHA:0:7}"
        env:
          REGISTRY: ${{ vars.HAMRAVESH_REGISTRY }}
          REGISTRY_PASSWORD: ${{ vars.HAMRAVESH_REGISTRY_PASSWORD }}
          REGISTRY_USER: ${{ vars.HAMRAVESH_REGISTRY_USER }}
          APP_NAME: ${{ vars.DARKUBE_APP_NAME }}
          IMAGE: ${{ vars.HAMRAVESH_REGISTRY }}/${{ vars.DARKUBE_APP_NAME }}

  Deploy:
    if: ${{ always() && contains(join(needs.*.result, ','), 'success') }}
    name: Build

    # depends on build job
    needs: Build

    # choosing which os to run on
    runs-on: ubuntu-latest

    # choosing darkube cli for building
    container: hamravesh.hamdocker.ir/public/darkube-cli:v1.1
    steps:

    # checking out the code
    - uses: actions/checkout@v2
    
    
    # making environment variables ready for darkube cli (translating from github actions to gitlab ci naming)
    # src https://docs.github.com/en/actions/learn-github-actions/variables
    - name: Deploy app
      run: darkube deploy --ref master --token ${DARKUBE_DEPLOY_TOKEN} --app-id ${DARKUBE_APP_ID}  --image-tag "${GITHUB_SHA:0:7}" --job-id "$GITHUB_RUN_ID" --stateless-app true
      env:
        DARKUBE_DEPLOY_TOKEN: ${{ vars.DARKUBE_DEPLOY_TOKEN }}
        DARKUBE_APP_ID: ${{ vars.DARKUBE_APP_ID }}

          